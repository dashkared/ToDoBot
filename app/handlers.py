import asyncio
import logging
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, reply_keyboard_remove
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.database.requests import set_user, del_task, set_task
from aiogram.enums import ChatAction
from app.states import TaskActions, Gen
from app.database.requests import update_task
import app.keyboards as kb
import app.database.requests as rq
from app.generate import ai_generate

router = Router()


class Register(StatesGroup):
    name = State()
    age = State()
    number = State()



@router.message(Command("start"))
async def start_cmd(message: Message):
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    await asyncio.sleep(1)
    await rq.set_user(message.from_user.id)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ToDo Bot!", reply_markup=kb.inline_main)


@router.message(Command('register'))
async def register(message: Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')


@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.age)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')


@router.message(Register.age)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Register.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)


@router.message(Register.number, F.contact)
async def register_number(message: Message, state: FSMContext):
    await state.update_data(number=message.contact.phone_number)
    data = await state.get_data()
    await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]}\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {data["age"]}\n–ù–æ–º–µ—Ä: {data["number"]}')
    await state.clear()


@router.callback_query(F.data == 'my_task')
async def task(callback: CallbackQuery):
    tasks = await rq.get_tasks(callback.from_user.id)

    if not tasks:
        await callback.message.edit_text(
            "üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç",
            reply_markup=kb.my_task
        )
        return await callback.answer()

    tasks_text = "üìã –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n\n" + "\n".join(
        f"‚ñ´Ô∏è {task.task}" for task in tasks
    )

    await callback.message.edit_text(
        f"{tasks_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.my_task
    )
    await callback.answer()


@router.callback_query(F.data == 'back')
async def return_back(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', reply_markup=kb.inline_main)


@router.callback_query(F.data == 'ai_req')
async def ai_generating(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:',
        reply_markup=kb.ai_cancel
    )
    await state.set_state(Gen.wait)
    await callback.answer()

@router.message(Gen.wait)
async def process_ai_request(message: Message, state: FSMContext):
    await message.answer("‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

    try:
        response = await ai_generate(message.text)
        await message.answer(text=response,
            reply_markup=kb.after_ai_response,
            parse_mode='Markdown'
        )
    except Exception as e:
        await message.answer(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=kb.back_to_main
        )

    await state.clear()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@router.callback_query(F.data == 'add')
async def add_task(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TaskActions.adding)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
    await callback.answer()


@router.message(TaskActions.adding)
async def task_added(message: Message, state: FSMContext):
    await set_task(message.from_user.id, message.text)
    await message.answer("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb.inline_main)
    await state.clear()


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@router.callback_query(F.data == 'delete')
async def delete_task_menu(callback: CallbackQuery):
    tasks_markup = await kb.delete_tasks(callback.from_user.id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=tasks_markup)
    await callback.answer()


@router.callback_query(F.data.startswith('delete_'))
async def delete_selected_task(callback: CallbackQuery):
    task_id = int(callback.data.split('_')[1])
    success = await del_task(task_id)
    if success:
        await callback.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=kb.inline_main)
    else:
        await callback.message.edit_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await callback.answer()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@router.callback_query(F.data == 'change')
async def change_task_menu(callback: CallbackQuery):
    tasks_markup = await kb.edit_tasks(callback.from_user.id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=tasks_markup)
    await callback.answer()


@router.callback_query(F.data.startswith('edit_'))
async def select_task_to_edit(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split('_')[1])
    await state.update_data(task_id=task_id)
    await state.set_state(TaskActions.new_text)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await callback.answer()


@router.message(TaskActions.new_text)
async def save_updated_task(message: Message, state: FSMContext):
    data = await state.get_data()
    success = await update_task(data['task_id'], message.text)
    if success:
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=kb.inline_main)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await state.clear()


